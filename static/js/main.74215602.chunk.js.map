{"version":3,"sources":["components/Media.js","components/Apod.js","App.js","serviceWorker.js","index.js"],"names":["Media","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","props","type","react_default","a","createElement","src","source","className","alt","width","height","title","frameBorder","allow","allowFullScreen","Component","Apod","_this","call","state","isLoaded","error","apod","date","Date","siteDate","convertSiteDate","pickDate","bind","assertThisInitialized","convertDate","_componentDidMount","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","getApod","stop","_componentDidUpdate","_callee2","prevProps","_context2","setState","_x","newDate","newSiteDate","dd","getDate","mm","getMonth","getFullYear","toString","substr","_getApod","_callee3","response","_context3","fetch","sent","ok","json","Error","t0","message","_x2","_this$state","style","styles","divCenter","es","selected","onChange","Media_Media","media_type","url","text","explanation","copyright","TwitterShareButton","TwitterIcon","display","justifyContent","alignItems","flexDirection","color","margin","fontSize","App","getToday","stars","header","Apod_Apod","today","position","backgroundColor","backgroundImage","backgroundSize","backgroundPosition","Boolean","window","location","hostname","match","document","body","ReactDOM","render","App_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74215602.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport class Media extends Component {\n  render() {\n    if (this.props.type === \"image\") {\n      return (\n        <img src={this.props.source} className=\"img-fluid\" alt=\"apod-media\" />\n      );\n    } else {\n      return (\n        <iframe\n          width=\"100%\"\n          height=\"560\"\n          title=\"APOD Video\"\n          src={this.props.source}\n          frameBorder=\"0\"\n          allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n          allowFullScreen\n        />\n      );\n    }\n  }\n}\n","import React, { Component } from \"react\";\nimport { Media } from \"./Media\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { TwitterShareButton, TwitterIcon } from \"react-share\";\n\nexport class Apod extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoaded: false,\n      error: null,\n      apod: null,\n      date: new Date(),\n      siteDate: this.convertSiteDate(new Date())\n    };\n\n    this.pickDate = this.pickDate.bind(this);\n    this.convertDate = this.convertDate.bind(this);\n    this.convertSiteDate = this.convertSiteDate.bind(this);\n  }\n\n  async componentDidMount() {\n    this.getApod(this.props.date);\n  }\n\n  async componentDidUpdate(prevProps) {\n    if (this.props.date !== prevProps.date) {\n      this.setState({\n        isLoaded: false,\n        error: null,\n        apod: null\n      });\n      this.getApod(this.props.date);\n    }\n  }\n\n  /**\n   * Handler function for the DatePicker that sets the date\n   */\n  pickDate(date) {\n    const newDate = this.convertDate(date);\n    const newSiteDate = this.convertSiteDate(date);\n    this.setState({ date: newDate, siteDate: newSiteDate });\n    this.getApod(newDate);\n  }\n\n  /**\n   * Converts a Date to a string in the yyyy-mm-dd format\n   */\n  convertDate(date) {\n    let dd = date.getDate();\n    let mm = date.getMonth() + 1;\n    const yyyy = date.getFullYear();\n\n    if (dd < 10) {\n      dd = \"0\" + dd;\n    }\n\n    if (mm < 10) {\n      mm = \"0\" + mm;\n    }\n\n    return yyyy + \"-\" + mm + \"-\" + dd;\n  }\n\n  /**\n   * Converts a Date to a string in the yymmdd format\n   */\n  convertSiteDate(date) {\n    let dd = date.getDate();\n    let mm = date.getMonth() + 1;\n    const yy = date\n      .getFullYear()\n      .toString()\n      .substr(-2);\n\n    if (dd < 10) {\n      dd = \"0\" + dd;\n    }\n\n    if (mm < 10) {\n      mm = \"0\" + mm;\n    }\n\n    return yy + mm + dd;\n  }\n\n  /**\n   * Sets the state to the response from the APOD API\n   */\n  async getApod(date) {\n    try {\n      let response = await fetch(\n        \"https://api.nasa.gov/planetary/apod?date=\" +\n          date +\n          \"&api_key=keE17Q4bcothAbNHaa5cfWphKelfsdRYFXH24EuH\"\n      );\n      if (await response.ok) {\n        response = await response.json();\n        this.setState({\n          isLoaded: true,\n          apod: response\n        });\n      } else {\n        throw new Error();\n      }\n    } catch (e) {\n      this.setState({\n        isLoaded: true,\n        error: e.message\n      });\n    }\n  }\n\n  render() {\n    const { isLoaded, error, apod } = this.state;\n    if (!isLoaded) {\n      return (\n        <div>\n          <div>\n            <span>Loading...</span>\n          </div>\n        </div>\n      );\n    } else if (error) {\n      return <p>Error</p>;\n    } else {\n      return (\n        <div>\n          <div style={styles.divCenter}>\n            <DatePicker selected={this.state.date} onChange={this.pickDate} />\n\n            <h2>{apod.title}</h2>\n            <div style={styles.divCenter}>\n              <Media type={apod.media_type} source={apod.url} />\n              <div style={styles.text}>\n                <p>{apod.explanation}</p>\n                <p>\n                  <strong>Copyright:</strong>{\" \"}\n                  {apod.copyright ? apod.copyright : \"Public Domain\"}\n                </p>\n              </div>\n            </div>\n            <TwitterShareButton\n              url={\n                \"https://apod.nasa.gov/apod/ap\" + this.state.siteDate + \".html\"\n              }\n            >\n              <TwitterIcon />\n            </TwitterShareButton>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nconst styles = {\n  divCenter: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    color: \"rgb(140, 137, 134)\"\n  },\n  text: {\n    color: \"rgb(140, 137, 134)\",\n    margin: \"auto\",\n    width: \"50%\",\n    fontSize: \"20px\"\n  }\n};\n","import React, { Component } from \"react\";\nimport { Apod } from \"./components/Apod\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.getToday = this.getToday.bind(this);\n    this.convertSiteDate = this.convertSiteDate.bind(this);\n    this.state = {\n      date: this.getToday(),\n      siteDate: this.convertSiteDate()\n    };\n  }\n\n  render() {\n    return (\n      <div style={styles.stars}>\n        <h1 style={styles.header}>Astronomy Picture of the Day</h1>\n        <Apod date={this.state.date} />\n      </div>\n    );\n  }\n\n  /**\n   * Returns a string representation of the date in yyyy-mm-dd format\n   */\n  getToday() {\n    const today = new Date();\n    let dd = today.getDate();\n    let mm = today.getMonth() + 1;\n    const yyyy = today.getFullYear();\n\n    if (dd < 10) {\n      dd = \"0\" + dd;\n    }\n\n    if (mm < 10) {\n      mm = \"0\" + mm;\n    }\n\n    return yyyy + \"-\" + mm + \"-\" + dd;\n  }\n\n  /**\n   * Returns a string representation of the date in yymmdd format\n   */\n  convertSiteDate() {\n    const today = new Date();\n    let dd = today.getDate();\n    let mm = today.getMonth() + 1;\n    const yy = today\n      .getFullYear()\n      .toString()\n      .substr(-2);\n\n    if (dd < 10) {\n      dd = \"0\" + dd;\n    }\n\n    if (mm < 10) {\n      mm = \"0\" + mm;\n    }\n\n    return yy + mm + dd;\n  }\n}\n\n// starry background from https://leaverou.github.io/css3patterns/#starry-night\nconst styles = {\n  header: {\n    color: \"rgb(140, 137, 134)\"\n  },\n  stars: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n    color: \"rgb(140, 137, 134)\",\n    position: \"absolute\",\n    backgroundColor: \"rgb(25, 27, 33)\",\n    backgroundImage:\n      \"radial-gradient(white, rgba(255, 255, 255, 0.2) 2px, transparent 40px), radial-gradient(white, rgba(255, 255, 255, 0.14902) 1px, transparent 30px), radial-gradient(white, rgba(255, 255, 255, 0.0980392) 2px, transparent 40px), radial-gradient(rgba(255, 255, 255, 0.4), rgba(255, 255, 255, 0.0980392) 2px, transparent 30px)\",\n    backgroundSize: \"550px 550px, 350px 350px, 250px 250px, 150px 150px\",\n    backgroundPosition: \"0px 0px, 40px 60px, 130px 270px, 70px 100px\"\n  }\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\ndocument.body.style = \"background: rgb(40, 44, 51)\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}